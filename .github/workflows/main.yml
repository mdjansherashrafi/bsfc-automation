name: CI - Deploy to OKE

on: [push]

jobs:
  deploy:
    runs-on: ubuntu-22.04

    env:
      OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
      OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
      OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
      OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
      OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install/Verify OCI CLI
        timeout-minutes: 10
        shell: bash
        run: |
          set -euxo pipefail
          if ! command -v oci >/dev/null 2>&1; then
            echo "Installing OCI CLI..."
            curl -fsSL -o install.sh https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
            chmod +x install.sh
            sudo ./install.sh --accept-all-defaults \
              --install-dir /usr/local/lib/oracle-cli \
              --exec-dir /usr/local/bin
            hash -r
          else
            echo "OCI CLI already installed"
          fi
          which oci
          oci --version

      - name: Setup SSH (for Bastion)
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keygen -b 2048 -t rsa -f ~/.ssh/id_rsa -q -N ""
          ssh-keyscan -H "${{ secrets.BASTION_HOST }}" >> ~/.ssh/known_hosts
          tr -d '\n' < ~/.ssh/id_rsa.pub > ~/.ssh/id_rsa_updated.pub
          {
            echo "Host ${{ secrets.BASTION_HOST }}"
            echo "    IdentityFile ~/.ssh/id_rsa"
            echo "    StrictHostKeyChecking accept-new"
          } >> ~/.ssh/config
          chmod 600 ~/.ssh/id_rsa ~/.ssh/config

      - name: Setup OCI CLI credentials
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$HOME/.oci"
          chmod 700 "$HOME/.oci"
          if [ -n "${{ secrets.OCI_CLI_KEY_B64 || '' }}" ]; then
            echo "${{ secrets.OCI_CLI_KEY_B64 }}" | base64 -d > "$HOME/.oci/oci_api_key.pem"
          else
            printf "%s" "${{ secrets.OCI_CLI_KEY_CONTENT }}" > "$HOME/.oci/oci_api_key.pem"
          fi
          chmod 600 "$HOME/.oci/oci_api_key.pem"
          cat > "$HOME/.oci/config" <<EOF
          [DEFAULT]
          user=${{ secrets.OCI_CLI_USER }}
          tenancy=${{ secrets.OCI_CLI_TENANCY }}
          fingerprint=${{ secrets.OCI_CLI_FINGERPRINT }}
          key_file=$HOME/.oci/oci_api_key.pem
          region=${{ secrets.OCI_CLI_REGION }}
          EOF
          chmod 600 "$HOME/.oci/config"
          oci iam region list --config-file "$HOME/.oci/config" --profile DEFAULT >/dev/null

      - name: Create Bastion Session and Resolve OKE Private IP
        shell: bash
        run: |
          set -euxo pipefail

          ENDPOINT=$(
            oci ce cluster get \
              --config-file "$HOME/.oci/config" \
              --cluster-id "${{ secrets.OKE_CLUSTER_OCID }}" \
              --query 'data."endpoints"."private-endpoint"' \
              --raw-output
          )
          OKE_PRIVATE_IP="${ENDPOINT%%:*}"
          echo "oke_private_ip=${OKE_PRIVATE_IP}" >> "$GITHUB_ENV"
          echo "Resolved OKE_PRIVATE_IP=${OKE_PRIVATE_IP}"

          oci bastion session create-port-forwarding \
            --config-file "$HOME/.oci/config" \
            --bastion-id "${{ secrets.BASTION_OCID }}" \
            --display-name "ga-to-oke-tunnel" \
            --ssh-public-key-file "$HOME/.ssh/id_rsa_updated.pub" \
            --key-type PUB \
            --target-private-ip "${OKE_PRIVATE_IP}" \
            --target-port 6443 \
            --wait-for-state SUCCEEDED > "$HOME/bastion_session.json"

          # Parse the Bastion Session OCID from the work request
          BASTION_SESSION_OCID=$(jq -r '
            .data.id | select(test("^ocid1\\.bastionsession")) //
            (.data.resources[]? | select(.entity-type=="SessionResource") | .identifier) //
            (.data.resources[]? | select(.entity-type=="SessionResource") | .["entity-uri"] | capture("/sessions/(?<id>ocid1\\.bastionsession[^/]+)").id)
          ' "$HOME/bastion_session.json")

          if [ -z "${BASTION_SESSION_OCID}" ] || [ "${BASTION_SESSION_OCID}" = "null" ] || [[ "${BASTION_SESSION_OCID}" != ocid1.bastionsession* ]]; then
            echo "Failed to parse valid Bastion session OCID"
            cat "$HOME/bastion_session.json"
            exit 1
          fi
          echo "bastion_session_ocid=${BASTION_SESSION_OCID}" >> "$GITHUB_ENV"
          echo "Parsed Bastion Session: ${BASTION_SESSION_OCID}"

      - name: Install kubectl
        shell: bash
        run: |
          set -euxo pipefail
          KVER=$(curl -fsSL https://dl.k8s.io/release/stable.txt)
          curl -fsSLo kubectl "https://dl.k8s.io/release/${KVER}/bin/linux/amd64/kubectl"
          curl -fsSLo kubectl.sha256 "https://dl.k8s.io/release/${KVER}/bin/linux/amd64/kubectl.sha256"
          echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
          sudo install -m 0755 kubectl /usr/local/bin/kubectl
          rm -f kubectl kubectl.sha256
          kubectl version --client --output=yaml

      - name: Start SSH Tunnel to OKE Cluster
        shell: bash
        run: |
          set -euxo pipefail
          ssh -i "$HOME/.ssh/id_rsa" \
              -o StrictHostKeyChecking=accept-new \
              -fN -L 6443:${{ env.oke_private_ip }}:6443 \
              "${{ env.bastion_session_ocid }}@${{ secrets.BASTION_HOST }}"

          for i in {1..15}; do
            if nc -z 127.0.0.1 6443; then
              echo "Tunnel is up."
              break
            fi
            echo "Waiting for tunnel..."
            sleep 2
          done

      - name: Configure OKE Cluster kubeconfig
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p "$HOME/.kube"
          oci ce cluster create-kubeconfig \
            --config-file "$HOME/.oci/config" \
            --cluster-id "${{ secrets.OKE_CLUSTER_OCID }}" \
            --file "$HOME/.kube/config" \
            --region "${{ secrets.OCI_CLI_REGION }}" \
            --token-version 2.0.0 \
            --kube-endpoint PRIVATE_ENDPOINT

          sed -i "s|${{ env.oke_private_ip }}|127.0.0.1|g" "$HOME/.kube/config"
          kubectl cluster-info

      - name: Deploy to OKE
        shell: bash
        run: |
          set -euxo pipefail
          kubectl get ns | grep -q "^nginx" || kubectl create namespace nginx
          kubectl apply -n nginx -f https://k8s.io/examples/application/deployment.yaml
          kubectl rollout status -n nginx deploy/nginx-deployment --timeout=180s

      - name: Delete OCI Bastion Session
        if: always()
        shell: bash
        run: |
          set -euxo pipefail
          if [ -f "$HOME/bastion_session.json" ]; then
            # Re-parse in case env was lost
            BASTION_SESSION_OCID=$(jq -r '
              .data.id | select(test("^ocid1\\.bastionsession")) //
              (.data.resources[]? | select(.entity-type=="SessionResource") | .identifier) //
              (.data.resources[]? | select(.entity-type=="SessionResource") | .["entity-uri"] | capture("/sessions/(?<id>ocid1\\.bastionsession[^/]+)").id)
            ' "$HOME/bastion_session.json")
            if [ -n "$BASTION_SESSION_OCID" ] && [ "$BASTION_SESSION_OCID" != "null" ]; then
              oci bastion session delete --config-file "$HOME/.oci/config" --session-id "${BASTION_SESSION_OCID}" --force
            else
              echo "No valid Bastion session id found; skipping delete."
            fi
          else
            echo "No bastion_session.json found; skipping delete."
          fi
